-- 18/09/2015

-- A linguagem SQL padrão SQL/92
--   SQL quer dizer Structured Query Language
--   É uma linguagem padrão para manipulação de Banco de Dados Relacionais

--   DML (Data Manipulation Language) é um subconjunto da linguagem da SQL que é 
--     utilizado para realizar inclusões, consultas, alterações e exclusões de dados 
--     presentes em registros. Estas tarefas podem ser executadas em vários registros 
--     de diversas tabelas ao mesmo tempo, os comandos que realizam respectivamente 
--     as funções acima referidas são Insert, Select, Update e Delete. 

--   DDL (Data Definition Language): permite ao utilizador definir tabelas novas e 
--     elementos associados. A maioria dos bancos de dados de SQL comerciais tem 
--     extensões proprietárias no DDL. Os comandos básicos da DDL são poucos: Create,
--     Drop e Alter.

-- Mais em http://pt.wikipedia.org/wiki/SQL

-- Sintaxe Geral do Comando SELECT
--   SELECT [DISTINCT] atributos 
--   FROM tabelas
--   [WHERE predicado]
--   [GROUP BY atributos]
--   [HAVING predicado]
--   [ORDER BY atributos];

-- Exemplos:

-- 1) Recuperar todas as informações sobre todos os fornecedores
		SELECT * FROM Salesman;
		
-- 2) Projeção: define que atributos devem ser recuperados.
--    Ex: recuperar o nome e a cidade de todos os fornecedores
		SELECT sname, city FROM Salesman;

--    Observe que SELECT * FROM Salesman; 
--    equivale a SELECT id, sname, status, city FROM Salesman;

-- 3) Registros Duplicados:
--	  Ex: recuperar o código dos fornecedores de todos os fornecimentos
		SELECT id_s FROM SalesmanPieces;

-- 4) Eliminando Duplicatas: indica que os registros duplicados devem ser eliminados
--    Ex: recuperar o código dos fornecedores que fornecem peças no momento
		SELECT DISTINCT id_s FROM SalesmanPieces;

-- 5) Expressões: novas colunas podem ser derivadas através de expressões aritméticas
--    envolvendo atributos e constantes
--    Ex: recuperar o código e o peso das peças em gramas (o peso armazenado está em
--    libras). Operações aritméticas: +, -, *, /		
		SELECT id, (weight * 454) peso_gramas FROM Pieces;

-- 6) Cláusula ORDER BY: define um critério de ordenação para os registros resultantes
--    ASC = Forma crescente (padrão); 
--    DESC = Forma decrescente;
--    As colunas podem ser identificadas pela posição.
		SELECT id, city, (weight * 454) peso_gramas 
			FROM Pieces 
			ORDER BY city ASC;
--    Ex: recuperar o código, a cidade e o peso em gramas de todas as peças, ordenadas
--        de forma crescente por cidade e, para cidades iguais, ordenadas de forma 
--        decrescente pelo peso em gramas
		SELECT id, city, weight * 454 FROM Pieces ORDER BY 2 ASC, 3 DESC;

-- 7) Cláusula WHERE (Seleção): através da cláusula WHERE, são definidos os predicados
--    (condições) que selecionam os registros a serem recuperados.
--    Ex: recuperar o código e o nome dos fornecedores de Londres
		SELECT id, sname FROM Salesman WHERE city = 'London';

--   O predicado pode ser uma expressão lógica envolvendo condições e os operadores
--   AND, OR ou NOT. Cada condição pode ser definida com os operadores comparativos
--   tradicionais: =, <>, <, <=, > ou >= .

--    Exercício: recuperar todas as informações das peças vermelhas com peso menor que
--               15 libras, ordenadas por código de forma descendente:
		SELECT * FROM Pieces WHERE color = 'red' AND weight < 15 ORDER BY id DESC;

-- 02/10/2015

--	Exercício: Recuperar o código dos fornecedores que fornecem a peça P2
		SELECT id_s FROM SalesmanPieces WHERE id_p = 'P2';

--	Verificar se um atributo possui (ou não) valor nulo
--	Exemplo:	recuperar as informações sobre os fornecimentos que tem a quantidade
--				desconhecida (nula) IS [NOT] NULL
		SELECT * FROM SalesmanPieces WHERE qty IS NOT NULL;
		 
--	Comparação com padrões: LIKE
--	Exemplo:	Recuperar as informações das peças cujo nome começa com a letra "C"
		SELECT * FROM Pieces WHERE pname LIKE 'C_';

--	O símbolo % representa uma sequencia qualquer de zero ou mais caracteres;
--	O símbolo _ representa um caracter qualquer;

--	Exemplos:	NOME LIKE '%SILVA%' será verdadeiro para todo NOME que contenha o sobrenome SILVA
--				NOME NOT LIKE 'Z%' será verdadeiro para todo NOME que NÃO comece pela letra Z
--				NOME LIKE '_V_' será verdadeiro para todo nome que contenha três letras e que a 
--					segunda letra seja a letra V

--	Utilizando intervalos nas comparações: BETWEEN
--	Exemplo:
				SELECT * FROM Salesman WHERE	city = 'London' OR
												(status >= 10 AND status <= 20);
--	Equivale a:
				SELECT * FROM Salesman WHERE	city = 'London' OR
												status BETWEEN 10 AND 20;

--	Exemplo: Recuperar valores FORA do intervalo
--				Recuperar as informações sobre os fornecimentos que tem a quantidade menos que 100
--				ou maior que 200
				SELECT * FROM SalesmanPieces WHERE qty NOT BETWEEN 100 AND 200;

-- 09/10/2015

--	Produto Cartesiano (mais de uma tabela)
--	A especificação de mais de uma tabela na cláusula FROM resulta no produto cartesiano
--	das tabelas envolvidas.
--	Ex: recuperar todos os registros da tabela de fornecedores combinados com todos
--         os registros da tabela de peças.
		SELECT * FROM Salesman, Pieces

--	Junção (JOIN), relaciona resgistros de duas (ou mais) tabelas. Esta operação
--     equivale a executar um produto cartesiano entre as relações e selecionar apenas
--     os registros que apresentem o mesmo valor para o atributo da junção.
--     Ex: recuperar os registros da tabela de fornecimentos combinados com os registros
--         da tabela de fornecedores, quando os códigos de fornecedores coincidirem.

		SELECT * FROM Salesman, SalesmanPieces WHERE Salesman.id = SalesmanPieces.id_s

--     Para evitar redundâncias, devemos qualificar os atributos com mesmo nome, 
--     indicando, através de um prefixo, a tabela de origem.

--	Ex: Join com condições extras e projeção. 
--		Recuperar o código, o nome e a cidade dos fornecedores que forneceram a peça P2.
		SELECT Salesman.id, Salesman.sname, Salesman.city 
			FROM Salesman, SalesmanPieces
			WHERE Salesman.id = SalesmanPieces.id_s 
			AND SalesmanPieces.id_p = 'P2';

--	Ex: Join de três tabelas. 
--		Recuperar todas as informações dos fornecedores que fornecem pelo menos uma peça vermelha.
		SELECT Salesman.* FROM Salesman, SalesmanPieces, Pieces
			WHERE Salesman.id = SalesmanPieces.id_s		-- join
			AND SalesmanPieces.id_p = Pieces.id			-- join
			AND Pieces.color = 'red';

-- Sinônimo (ALIAS): quando uma mesma tabela é utilizada mais de uma vez em uma
-- consulta, precisamos, para não gerar ambiguidades, definir sinônimos para esta tabela.
		SELECT s.* FROM Salesman s, SalesmanPieces sp, Pieces p
			WHERE s.id = sp.id_s
			AND sp.id_p = p.id
			AND p.color = 'red';

-- Ex: Recuperar os códigos de fornecedores localizados na mesma cidade.
		SELECT a.id, a.sname, a.city, b.id, b.sname, b.city 
			FROM Salesman a, Salesman b
			WHERE a.city = b.city AND a.id < b.id;

-- Exercício: Recuperar o nome do fornecedor e da peça de todos os fornecimentos de londres cujo peso 
-- em gramas da peça esteja entre 2000 e 6000.
		SELECT s.sname, p.pname 
			FROM Salesman s, SalesmanPieces sp, Pieces p
			WHERE s.id = sp.id_s
			AND sp.id_p = p.id
			AND s.city = 'London'
			AND (p.weight * 454) BETWEEN 2000 AND 6000;







